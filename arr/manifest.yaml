apiVersion: v1
kind: Namespace
metadata:
  name: arr

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: porygon-downloads-pv
  namespace: arr
spec:
  capacity:
    storage: 1Gi # Arbitrary
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    server: 192.168.86.77
    path: /data/media/downloads

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: porygon-downloads-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi # Arbitrary
  volumeName: porygon-downloads-pv
  storageClassName: ""

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
      - name: sonarr
        image: linuxserver/sonarr:4.0.15
        imagePullPolicy: Always
        ports:
        - containerPort: 8989
        env:
        - name: PUID
          value: "1002"
        - name: PGID
          value: "1002"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: downloads
          mountPath: /downloads
        - name: config
          mountPath: /config
      volumes:
      - name: downloads
        persistentVolumeClaim:
          claimName: porygon-downloads-pvc
      - name: config
        persistentVolumeClaim:
          claimName: sonarr-config-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: arr
spec:
  selector:
    app: sonarr
  ports:
  - name: http
    port: 80
    targetPort: 8989

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr
  namespace: arr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
  - hosts:
      - sonarr.pokedex.lan
    secretName: sonarr-tls
  rules:
  - host: sonarr.pokedex.lan
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarr
            port:
              number: 80

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      containers:
      - name: radarr
        image: linuxserver/radarr:5.26.2
        imagePullPolicy: Always
        ports:
        - containerPort: 7878
        env:
        - name: PUID
          value: "1002"
        - name: PGID
          value: "1002"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: downloads
          mountPath: /downloads
        - name: config
          mountPath: /config
      volumes:
      - name: downloads
        persistentVolumeClaim:
          claimName: porygon-downloads-pvc
      - name: config
        persistentVolumeClaim:
          claimName: radarr-config-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: arr
spec:
  selector:
    app: radarr
  ports:
  - name: http
    port: 80
    targetPort: 7878

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radarr
  namespace: arr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
  - hosts:
      - radarr.pokedex.lan
    secretName: radarr-tls
  rules:
  - host: radarr.pokedex.lan
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radarr
            port:
              number: 80

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lidarr-config-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: lidarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lidarr
  template:
    metadata:
      labels:
        app: lidarr
    spec:
      containers:
      - name: lidarr
        image: linuxserver/lidarr:2.12.4
        imagePullPolicy: Always
        ports:
        - containerPort: 8686
        env:
        - name: PUID
          value: "1002"
        - name: PGID
          value: "1002"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: downloads
          mountPath: /downloads
        - name: config
          mountPath: /config
      volumes:
      - name: downloads
        persistentVolumeClaim:
          claimName: porygon-downloads-pvc
      - name: config
        persistentVolumeClaim:
          claimName: lidarr-config-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: lidarr
  namespace: arr
spec:
  selector:
    app: lidarr
  ports:
  - name: http
    port: 80
    targetPort: 8686

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lidarr
  namespace: arr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
  - hosts:
      - lidarr.pokedex.lan
    secretName: lidarr-tls
  rules:
  - host: lidarr.pokedex.lan
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: lidarr
            port:
              number: 80

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bazarr-config-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: bazarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      containers:
      - name: bazarr
        image: linuxserver/bazarr:1.5.2
        imagePullPolicy: Always
        ports:
        - containerPort: 6767
        env:
        - name: PUID
          value: "1002"
        - name: PGID
          value: "1002"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: downloads
          mountPath: /downloads
        - name: config
          mountPath: /config
      volumes:
      - name: downloads
        persistentVolumeClaim:
          claimName: porygon-downloads-pvc
      - name: config
        persistentVolumeClaim:
          claimName: bazarr-config-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: bazarr
  namespace: arr
spec:
  selector:
    app: bazarr
  ports:
  - name: http
    port: 80
    targetPort: 6767

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bazarr
  namespace: arr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
  - hosts:
      - bazarr.pokedex.lan
    secretName: bazarr-tls
  rules:
  - host: bazarr.pokedex.lan
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: bazarr
            port:
              number: 80

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prowlarr-config-pvc
  namespace: arr
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
  namespace: arr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      containers:
      - name: prowlarr
        image: linuxserver/prowlarr:1.37.0
        imagePullPolicy: Always
        ports:
        - containerPort: 9696
        env:
        - name: PUID
          value: "1002"
        - name: PGID
          value: "1002"
        - name: TZ
          value: "America/New_York"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: downloads
          mountPath: /downloads
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: prowlarr-config-pvc
      - name: downloads
        persistentVolumeClaim:
          claimName: porygon-downloads-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: arr
spec:
  selector:
    app: prowlarr
  ports:
  - name: http
    port: 80
    targetPort: 9696

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prowlarr
  namespace: arr
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  tls:
  - hosts:
      - prowlarr.pokedex.lan
    secretName: prowlarr-tls
  rules:
  - host: prowlarr.pokedex.lan
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prowlarr
            port:
              number: 80
